//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/[InputSystem]/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Models"",
            ""id"": ""98255f63-59e6-4fbb-b33e-56320c0472e7"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ff7ab56c-7419-4dbc-a5e4-0aca12a016f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""b3d6b42d-f5c4-4605-bc89-b18f064d72b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScrollY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c60ea2af-99f3-42b6-9f56-78be7a76f2e5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c68257c0-285a-4e53-993c-c11cc27fbea8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17eaed85-e3f5-48f9-bf75-fcd3307a3ca8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30722300-a672-41bd-ac2c-7467a91d7e6b"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Models
        m_Models = asset.FindActionMap("Models", throwIfNotFound: true);
        m_Models_MousePosition = m_Models.FindAction("MousePosition", throwIfNotFound: true);
        m_Models_MouseClick = m_Models.FindAction("MouseClick", throwIfNotFound: true);
        m_Models_MouseScrollY = m_Models.FindAction("MouseScrollY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Models
    private readonly InputActionMap m_Models;
    private IModelsActions m_ModelsActionsCallbackInterface;
    private readonly InputAction m_Models_MousePosition;
    private readonly InputAction m_Models_MouseClick;
    private readonly InputAction m_Models_MouseScrollY;
    public struct ModelsActions
    {
        private @GameControls m_Wrapper;
        public ModelsActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Models_MousePosition;
        public InputAction @MouseClick => m_Wrapper.m_Models_MouseClick;
        public InputAction @MouseScrollY => m_Wrapper.m_Models_MouseScrollY;
        public InputActionMap Get() { return m_Wrapper.m_Models; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModelsActions set) { return set.Get(); }
        public void SetCallbacks(IModelsActions instance)
        {
            if (m_Wrapper.m_ModelsActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMousePosition;
                @MouseClick.started -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseClick;
                @MouseScrollY.started -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseScrollY;
                @MouseScrollY.performed -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseScrollY;
                @MouseScrollY.canceled -= m_Wrapper.m_ModelsActionsCallbackInterface.OnMouseScrollY;
            }
            m_Wrapper.m_ModelsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MouseScrollY.started += instance.OnMouseScrollY;
                @MouseScrollY.performed += instance.OnMouseScrollY;
                @MouseScrollY.canceled += instance.OnMouseScrollY;
            }
        }
    }
    public ModelsActions @Models => new ModelsActions(this);
    public interface IModelsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMouseScrollY(InputAction.CallbackContext context);
    }
}
